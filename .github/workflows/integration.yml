name: Integration tests

on:
  pull_request:
    paths:
      - '.github/workflows/integration.yml'
      - 'appinfo/**'
      - 'lib/**'
      - 'templates/**'
      - 'tests/**'
      - 'composer.json'
      - 'composer.lock'
  push:
    branches:
      - main
      - master
      - stable*

env:
  APP_NAME: tables

jobs:
  integration:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        server-versions: ['stable25', 'stable26', 'stable27', 'master']
        include:
          - php-versions: '8.2'
          - server-versions: 'stable25'
            php-versions: '7.4'
            databases: 'sqlite'
          - server-versions: 'stable26'
            php-versions: '8.1'
            databases: 'mysql'
          - server-versions: 'stable27'
            php-versions: '8.1'
            databases: 'mysql'
          - server-versions: 'master'
            databases: 'sqlite'
          - server-versions: 'master'
            databases: 'mysql'
          - server-versions: 'master'
            databases: 'pgsql'

    name: php${{ matrix.php-versions }}-${{ matrix.databases }}-${{ matrix.server-versions }}

    services:
      postgres:
        image: ghcr.io/nextcloud/continuous-integration-postgres-14:latest
        ports:
          - 4445:5432/tcp
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: rootpassword
          POSTGRES_DB: nextcloud
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 2s --health-retries 5
      mysql:
        image: ghcr.io/nextcloud/continuous-integration-mariadb-10.6:latest
        ports:
          - 4444:3306/tcp
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
        options: --health-cmd="mysqladmin ping" --health-interval 5s --health-timeout 2s --health-retries 5

    steps:
      - name: Checkout server
        uses: actions/checkout@v3
        with:
          repository: nextcloud/server
          ref: ${{ matrix.server-versions }}

      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
          cd build/integration && composer require --dev phpunit/phpunit:~9

      - name: Checkout app
        uses: actions/checkout@v3
        with:
          path: apps/${{ env.APP_NAME }}

      - name: Set up php ${{ matrix.php-versions }}
        uses: shivammathur/setup-php@2.24.0
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: bz2, ctype, curl, dom, fileinfo, gd, iconv, intl, json, libxml, mbstring, openssl, pcntl, posix, session, simplexml, xmlreader, zip, zlib, sqlite, pdo_sqlite, apcu, pgsql, pdo_pgsql,mysql, pdo_mysql
          ini-values:
            apc.enable_cli=on
          coverage: none

      - name: Set up dependencies
        working-directory: apps/${{ env.APP_NAME }}
        run: composer i --no-dev

      - name: Set up Nextcloud
        run: |
          if [ "${{ matrix.databases }}" = "mysql" ]; then
            export DB_PORT=4444
          elif [ "${{ matrix.databases }}" = "pgsql" ]; then
            export DB_PORT=4445
          fi
          mkdir data
          ./occ maintenance:install --verbose --database=${{ matrix.databases }} --database-name=nextcloud --database-host=127.0.0.1 --database-port=$DB_PORT --database-user=root --database-pass=rootpassword --admin-user admin --admin-pass admin
          ./occ config:system:set hashing_default_password --value=true --type=boolean
          ./occ config:system:set memcache.local --value="\\OC\\Memcache\\APCu"
          ./occ config:system:set memcache.distributed --value="\\OC\\Memcache\\APCu"
          cat config/config.php
          ./occ user:list
          ./occ app:enable --force ${{ env.APP_NAME }}
          ./occ config:system:set query_log_file --value '/home/runner/work/${{ env.APP_NAME }}/${{ env.APP_NAME }}/query.log'
          php -S localhost:8080 &

      - name: Run behat
        working-directory: apps/${{ env.APP_NAME }}/tests/integration
        run: ./run.sh

      - name: Query count
        if: ${{ matrix.databases == 'mysql' && matrix.php-versions == '8.2' && matrix.server-versions == 'master' && github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let myOutput = ''
            let myError = ''

            const options = {}
            options.listeners = {
              stdout: (data) => {
                myOutput += data.toString()
              },
              stderr: (data) => {
                myError += data.toString()
              }
            }
            await exec.exec(`/bin/bash -c "cat /home/runner/work/${{ env.APP_NAME }}/${{ env.APP_NAME }}/query.log | wc -l"`, [], options)
            msg = myOutput
            const queryCount = parseInt(myOutput, 10)

            myOutput = ''
            await exec.exec('cat', ['/home/runner/work/${{ env.APP_NAME }}/${{ env.APP_NAME }}/apps/${{ env.APP_NAME }}/tests/integration/base-query-count.txt'], options)
            const baseCount = parseInt(myOutput, 10)

            const absoluteIncrease = queryCount - baseCount
            const relativeIncrease = baseCount <= 0 ? 100 : (parseInt((absoluteIncrease / baseCount * 10000), 10) / 100)

            if (absoluteIncrease >= 100 || relativeIncrease > 5) {
              const comment = `üê¢ Performance warning.\nIt looks like the query count of the integration tests increased with this PR.\nDatabase query count is now ` + queryCount + ' was ' + baseCount + ' (+' + relativeIncrease + '%)\nPlease check your code again. If you added a new test this can be expected and the base value in tests/integration/base-query-count.txt can be increased.'
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              })
            }
            if (queryCount < 100) {
              const comment = `üêà Performance messuring seems broken. Failed to get query count.`
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              })
            }
