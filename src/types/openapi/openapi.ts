/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = {
  "/index.php/apps/tables/api/1/tables": {
    /** Returns all Tables */
    get: operations["api1-list"];
    /** Create a new table and return it */
    post: operations["api1-create-table"];
  };
  "/index.php/apps/tables/api/1/tables/{tableId}": {
    /** Get a table object */
    get: operations["api1-get-table"];
    /** Update tables properties */
    put: operations["api1-update-table"];
    /** Delete a table */
    delete: operations["api1-delete-table"];
  };
  "/index.php/apps/tables/api/1/tables/{tableId}/views": {
    /** Get all views for a table */
    get: operations["api1-list-views"];
    /** Create a new view for a table */
    post: operations["api1-create-view"];
  };
  "/index.php/apps/tables/api/1/views/{viewId}": {
    /** Get a view object */
    get: operations["api1-get-view"];
    /** Update a view via key-value sets */
    put: operations["api1-update-view"];
    /** Delete a view */
    delete: operations["api1-delete-view"];
  };
  "/index.php/apps/tables/api/1/shares/{shareId}": {
    /** Get a share object */
    get: operations["api1-get-share"];
    /** Update a share permission */
    put: operations["api1-update-share-permissions"];
    /** Delete a share */
    delete: operations["api1-delete-share"];
  };
  "/index.php/apps/tables/api/1/views/{viewId}/shares": {
    /** Get all shares for a view Will be empty if view does not exist */
    get: operations["api1-list-view-shares"];
  };
  "/index.php/apps/tables/api/1/tables/{tableId}/shares": {
    /** Get all shares for a table Will be empty if table does not exist */
    get: operations["api1-list-table-shares"];
    /** Create a share for a table */
    post: operations["api1-create-table-share"];
  };
  "/index.php/apps/tables/api/1/shares": {
    /** Create a new share */
    post: operations["api1-create-share"];
  };
  "/index.php/apps/tables/api/1/shares/{shareId}/display-mode": {
    /** Updates the display mode of a context share */
    put: operations["api1-update-share-display-mode"];
  };
  "/index.php/apps/tables/api/1/tables/{tableId}/columns": {
    /** Get all columns for a table or a underlying view Return an empty array if no columns were found */
    get: operations["api1-list-table-columns"];
    /** Create a new column for a table */
    post: operations["api1-create-table-column"];
  };
  "/index.php/apps/tables/api/1/views/{viewId}/columns": {
    /** Get all columns for a view Return an empty array if no columns were found */
    get: operations["api1-list-view-columns"];
  };
  "/index.php/apps/tables/api/1/columns": {
    /** Create a column */
    post: operations["api1-create-column"];
  };
  "/index.php/apps/tables/api/1/columns/{columnId}": {
    /** Returns a column object */
    get: operations["api1-get-column"];
    /** Update a column */
    put: operations["api1-update-column"];
    /** Delete a column */
    delete: operations["api1-delete-column"];
  };
  "/index.php/apps/tables/api/1/tables/{tableId}/rows/simple": {
    /** List all rows values for a table, first row are the column titles */
    get: operations["api1-list-table-rows-simple"];
  };
  "/index.php/apps/tables/api/1/tables/{tableId}/rows": {
    /** List all rows for a table */
    get: operations["api1-list-table-rows"];
    /** Create a row within a table */
    post: operations["api1-create-row-in-table"];
  };
  "/index.php/apps/tables/api/1/views/{viewId}/rows": {
    /** List all rows for a view */
    get: operations["api1-list-view-rows"];
    /** Create a row within a view */
    post: operations["api1-create-row-in-view"];
  };
  "/index.php/apps/tables/api/1/rows/{rowId}": {
    /** Get a row */
    get: operations["api1-get-row"];
    /** Update a row */
    put: operations["api1-update-row"];
    /** Delete a row */
    delete: operations["api1-delete-row"];
  };
  "/index.php/apps/tables/api/1/views/{viewId}/rows/{rowId}": {
    /** Delete a row within a view */
    delete: operations["api1-delete-row-by-view"];
  };
  "/index.php/apps/tables/api/1/import/table/{tableId}": {
    /** Import from file in to a table */
    post: operations["api1-import-in-table"];
  };
  "/index.php/apps/tables/api/1/import/views/{viewId}": {
    /** Import from file in to a table */
    post: operations["api1-import-in-view"];
  };
  "/ocs/v2.php/apps/tables/api/2/init": {
    /**
     * [api v2] Returns all main resources
     * @description Tables and views incl. shares
     */
    get: operations["api_general-list"];
  };
  "/ocs/v2.php/apps/tables/api/2/tables": {
    /** [api v2] Returns all Tables */
    get: operations["api_tables-list"];
    /** [api v2] Create a new table and return it */
    post: operations["api_tables-create"];
  };
  "/ocs/v2.php/apps/tables/api/2/tables/{id}": {
    /** [api v2] Get a table object */
    get: operations["api_tables-show"];
    /** [api v2] Update tables properties */
    put: operations["api_tables-update"];
    /** [api v2] Delete a table */
    delete: operations["api_tables-destroy"];
  };
  "/ocs/v2.php/apps/tables/api/2/tables/{id}/transfer": {
    /**
     * [api v2] Transfer table
     * @description Transfer table from one user to another
     */
    put: operations["api_tables-transfer"];
  };
  "/ocs/v2.php/apps/tables/api/2/columns/{nodeType}/{nodeId}": {
    /**
     * [api v2] Get all columns for a table or a view
     * @description Return an empty array if no columns were found
     */
    get: operations["api_columns-list"];
  };
  "/ocs/v2.php/apps/tables/api/2/columns/{id}": {
    /** [api v2] Get a column object */
    get: operations["api_columns-show"];
  };
  "/ocs/v2.php/apps/tables/api/2/columns/number": {
    /**
     * [api v2] Create new numbered column
     * @description Specify a subtype to use any special numbered column
     */
    post: operations["api_columns-create-number-column"];
  };
  "/ocs/v2.php/apps/tables/api/2/columns/text": {
    /**
     * [api v2] Create new text column
     * @description Specify a subtype to use any special text column
     */
    post: operations["api_columns-create-text-column"];
  };
  "/ocs/v2.php/apps/tables/api/2/columns/selection": {
    /**
     * [api v2] Create new selection column
     * @description Specify a subtype to use any special selection column
     */
    post: operations["api_columns-create-selection-column"];
  };
  "/ocs/v2.php/apps/tables/api/2/columns/datetime": {
    /**
     * [api v2] Create new datetime column
     * @description Specify a subtype to use any special datetime column
     */
    post: operations["api_columns-create-datetime-column"];
  };
  "/ocs/v2.php/apps/tables/api/2/favorites/{nodeType}/{nodeId}": {
    /** [api v2] Add a node (table or view) to user favorites */
    post: operations["api_favorite-create"];
    /** [api v2] Remove a node (table or view) to from favorites */
    delete: operations["api_favorite-destroy"];
  };
  "/ocs/v2.php/apps/tables/api/2/contexts": {
    /**
     * [api v3] Get all contexts available to the requesting person
     * @description Return an empty array if no contexts were found
     */
    get: operations["context-list"];
    /** [api v2] Create a new context and return it */
    post: operations["context-create"];
  };
  "/ocs/v2.php/apps/tables/api/2/contexts/{contextId}": {
    /** [api v2] Get information about the requests context */
    get: operations["context-show"];
    /** [api v2] Update an existing context and return it */
    put: operations["context-update"];
    /** [api v2] Delete an existing context and return it */
    delete: operations["context-destroy"];
  };
  "/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/transfer": {
    /** [api v2] Transfer the ownership of a context and return it */
    put: operations["context-transfer"];
  };
  "/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/nodes": {
    /** [api v2] Add a node to a Context */
    post: operations["context-add-node"];
  };
  "/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/nodes/{nodeRelId}": {
    /** [api v2] Remove a node from a Context */
    delete: operations["context-remove-node"];
  };
  "/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/pages/{pageId}": {
    /** [api v2] Update the order on a page of a context */
    put: operations["context-update-content-order"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    Capabilities: {
      tables: {
        enabled: boolean;
        version: string;
        apiVersions: string[];
        features: string[];
        column_types: string[];
      };
    };
    Column: {
      /** Format: int64 */
      id: number;
      title: string;
      /** Format: int64 */
      tableId: number;
      createdBy: string;
      createdAt: string;
      lastEditBy: string;
      lastEditAt: string;
      type: string;
      subtype: string;
      mandatory: boolean;
      description: string;
      /** Format: int64 */
      orderWeight: number;
      /** Format: float */
      numberDefault: number;
      /** Format: float */
      numberMin: number;
      /** Format: float */
      numberMax: number;
      /** Format: int64 */
      numberDecimals: number;
      numberPrefix: string;
      numberSuffix: string;
      textDefault: string;
      textAllowedPattern: string;
      /** Format: int64 */
      textMaxLength: number;
      selectionOptions: string;
      selectionDefault: string;
      datetimeDefault: string;
    };
    Context: {
      /** Format: int64 */
      id: number;
      name: string;
      iconName: string;
      description: string;
      owner: string;
      /** Format: int64 */
      ownerType: number;
    };
    ContextNavigation: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      shareId: number;
      /** Format: int64 */
      displayMode: number;
      userId: string;
    };
    ImportState: {
      /** Format: int64 */
      found_columns_count: number;
      /** Format: int64 */
      matching_columns_count: number;
      /** Format: int64 */
      created_columns_count: number;
      /** Format: int64 */
      inserted_rows_count: number;
      /** Format: int64 */
      errors_parsing_count: number;
      /** Format: int64 */
      errors_count: number;
    };
    Index: {
      tables: components["schemas"]["Table"][];
      views: components["schemas"]["View"][];
    };
    OCSMeta: {
      status: string;
      statuscode: number;
      message?: string;
      totalitems?: string;
      itemsperpage?: string;
    };
    Row: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      tableId: number;
      createdBy: string;
      createdAt: string;
      lastEditBy: string;
      lastEditAt: string;
      data: {
        /** Format: int64 */
        columnId: number;
        value: Record<string, never>;
      } | null;
    };
    Share: {
      /** Format: int64 */
      id: number;
      sender: string;
      receiver: string;
      receiverDisplayName: string;
      receiverType: string;
      /** Format: int64 */
      nodeId: number;
      nodeType: string;
      permissionRead: boolean;
      permissionCreate: boolean;
      permissionUpdate: boolean;
      permissionDelete: boolean;
      permissionManage: boolean;
      createdAt: string;
      createdBy: string;
    };
    Table: {
      /** Format: int64 */
      id: number;
      title: string;
      emoji: string | null;
      ownership: string;
      ownerDisplayName: string;
      createdBy: string;
      createdAt: string;
      lastEditBy: string;
      lastEditAt: string;
      archived: boolean;
      favorite: boolean;
      isShared: boolean;
      onSharePermissions: {
        read: boolean;
        create: boolean;
        update: boolean;
        delete: boolean;
        manage: boolean;
      } | null;
      hasShares: boolean;
      /** Format: int64 */
      rowsCount: number;
      views: components["schemas"]["View"][];
      /** Format: int64 */
      columnsCount: number;
    };
    View: {
      /** Format: int64 */
      id: number;
      title: string;
      emoji: string | null;
      /** Format: int64 */
      tableId: number;
      ownership: string;
      ownerDisplayName: string | null;
      createdBy: string;
      createdAt: string;
      lastEditBy: string;
      lastEditAt: string;
      description: string | null;
      columns: number[];
      sort: ({
          /** Format: int64 */
          columnId: number;
          /** @enum {string} */
          mode: "ASC" | "DESC";
        })[];
      filter: (({
            /** Format: int64 */
            columnId: number;
            /** @enum {string} */
            operator: "begins-with" | "ends-with" | "contains" | "is-equal" | "is-greater-than" | "is-greater-than-or-equal" | "is-lower-than" | "is-lower-than-or-equal" | "is-empty";
            value: string | number;
          })[])[];
      isShared: boolean;
      favorite: boolean;
      onSharePermissions: {
        read: boolean;
        create: boolean;
        update: boolean;
        delete: boolean;
        manage: boolean;
      } | null;
      hasShares: boolean;
      /** Format: int64 */
      rowsCount: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /** Returns all Tables */
  "api1-list": {
    responses: {
      /** @description Tables returned */
      200: {
        content: {
          "application/json": components["schemas"]["Table"][];
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create a new table and return it */
  "api1-create-table": {
    parameters: {
      query: {
        /** @description Title of the table */
        title: string;
        /** @description Emoji for the table */
        emoji?: string | null;
        /** @description Template to use if wanted */
        template?: string;
      };
    };
    responses: {
      /** @description Tables returned */
      200: {
        content: {
          "application/json": components["schemas"]["Table"];
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get a table object */
  "api1-get-table": {
    parameters: {
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Table returned */
      200: {
        content: {
          "application/json": components["schemas"]["Table"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Update tables properties */
  "api1-update-table": {
    parameters: {
      query?: {
        /** @description New table title */
        title?: string | null;
        /** @description New table emoji */
        emoji?: string | null;
        /** @description Whether the table is archived */
        archived?: 0 | 1;
      };
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Tables returned */
      200: {
        content: {
          "application/json": components["schemas"]["Table"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Delete a table */
  "api1-delete-table": {
    parameters: {
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Deleted table returned */
      200: {
        content: {
          "application/json": components["schemas"]["Table"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get all views for a table */
  "api1-list-views": {
    parameters: {
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Views returned */
      200: {
        content: {
          "application/json": components["schemas"]["View"][];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create a new view for a table */
  "api1-create-view": {
    parameters: {
      query: {
        /** @description Title for the view */
        title: string;
        /** @description Emoji for the view */
        emoji?: string | null;
      };
      path: {
        /** @description Table ID that will hold the view */
        tableId: number;
      };
    };
    responses: {
      /** @description View created */
      200: {
        content: {
          "application/json": components["schemas"]["View"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get a view object */
  "api1-get-view": {
    parameters: {
      path: {
        /** @description View ID */
        viewId: number;
      };
    };
    responses: {
      /** @description View returned */
      200: {
        content: {
          "application/json": components["schemas"]["View"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Update a view via key-value sets */
  "api1-update-view": {
    parameters: {
      query: {
        /** @description key-value pairs */
        data: OneOf<[{
          /** @enum {string} */
          key: "title" | "emoji" | "description";
          value: string;
        }, {
          /** @enum {string} */
          key: "columns";
          value: number[];
        }, {
          /** @enum {string} */
          key: "sort";
          value: {
            /** Format: int64 */
            columnId: number;
            /** @enum {string} */
            mode: "ASC" | "DESC";
          };
        }, {
          /** @enum {string} */
          key: "filter";
          value: {
            /** Format: int64 */
            columnId: number;
            /** @enum {string} */
            operator: "begins-with" | "ends-with" | "contains" | "is-equal" | "is-greater-than" | "is-greater-than-or-equal" | "is-lower-than" | "is-lower-than-or-equal" | "is-empty";
            value: string | number;
          };
        }]>;
      };
      path: {
        /** @description View ID */
        viewId: number;
      };
    };
    responses: {
      /** @description View updated */
      200: {
        content: {
          "application/json": components["schemas"]["View"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Delete a view */
  "api1-delete-view": {
    parameters: {
      path: {
        /** @description View ID */
        viewId: number;
      };
    };
    responses: {
      /** @description View deleted */
      200: {
        content: {
          "application/json": components["schemas"]["View"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get a share object */
  "api1-get-share": {
    parameters: {
      path: {
        /** @description Share ID */
        shareId: number;
      };
    };
    responses: {
      /** @description Share returned */
      200: {
        content: {
          "application/json": components["schemas"]["Share"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Update a share permission */
  "api1-update-share-permissions": {
    parameters: {
      query: {
        /** @description Permission type that should be changed */
        permissionType: string;
        /** @description New permission value */
        permissionValue: 0 | 1;
      };
      path: {
        /** @description Share ID */
        shareId: number;
      };
    };
    responses: {
      /** @description View deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Share"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Delete a share */
  "api1-delete-share": {
    parameters: {
      path: {
        /** @description Share ID */
        shareId: number;
      };
    };
    responses: {
      /** @description View deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Share"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get all shares for a view Will be empty if view does not exist */
  "api1-list-view-shares": {
    parameters: {
      path: {
        /** @description View ID */
        viewId: number;
      };
    };
    responses: {
      /** @description Shares returned */
      200: {
        content: {
          "application/json": components["schemas"]["Share"][];
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get all shares for a table Will be empty if table does not exist */
  "api1-list-table-shares": {
    parameters: {
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Shares returned */
      200: {
        content: {
          "application/json": components["schemas"]["Share"][];
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create a share for a table */
  "api1-create-table-share": {
    parameters: {
      query: {
        /** @description Receiver ID */
        receiver: string;
        /** @description Receiver type */
        receiverType: "user" | "group";
        /** @description Permission if receiver can read data */
        permissionRead: 0 | 1;
        /** @description Permission if receiver can create data */
        permissionCreate: 0 | 1;
        /** @description Permission if receiver can update data */
        permissionUpdate: 0 | 1;
        /** @description Permission if receiver can delete data */
        permissionDelete: 0 | 1;
        /** @description Permission if receiver can manage table */
        permissionManage: 0 | 1;
      };
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description View deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Share"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create a new share */
  "api1-create-share": {
    parameters: {
      query: {
        /** @description Node ID */
        nodeId: number;
        /** @description Node type */
        nodeType: "table" | "view";
        /** @description Receiver ID */
        receiver: string;
        /** @description Receiver type */
        receiverType: "user" | "group";
        /** @description Permission if receiver can read data */
        permissionRead?: 0 | 1;
        /** @description Permission if receiver can create data */
        permissionCreate?: 0 | 1;
        /** @description Permission if receiver can update data */
        permissionUpdate?: 0 | 1;
        /** @description Permission if receiver can delete data */
        permissionDelete?: 0 | 1;
        /** @description Permission if receiver can manage node */
        permissionManage?: 0 | 1;
        /** @description context shares only, whether it should appear in nav bar. 0: no, 1: recipients, 2: all */
        displayMode?: number;
      };
    };
    responses: {
      /** @description Share returned */
      200: {
        content: {
          "application/json": components["schemas"]["Share"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Updates the display mode of a context share */
  "api1-update-share-display-mode": {
    parameters: {
      query: {
        /** @description The new value for the display mode of the nav bar icon. 0: hidden, 1: visible for recipients, 2: visible for all */
        displayMode: number;
        /** @description "default" to set the default, "self" to set an override for the authenticated user */
        target?: "default" | "self";
      };
      path: {
        /** @description Share ID */
        shareId: number;
      };
    };
    responses: {
      /** @description Display mode updated */
      200: {
        content: {
          "application/json": components["schemas"]["ContextNavigation"];
        };
      };
      /** @description Invalid parameter */
      400: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Share not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get all columns for a table or a underlying view Return an empty array if no columns were found */
  "api1-list-table-columns": {
    parameters: {
      query?: {
        /** @description View ID */
        viewId?: number | null;
      };
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description View deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Column"][];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create a new column for a table */
  "api1-create-table-column": {
    parameters: {
      query: {
        /** @description Title */
        title: string;
        /** @description Column main type */
        type: "text" | "number" | "datetime" | "select";
        /** @description Column sub type */
        subtype?: string | null;
        /** @description Is the column mandatory */
        mandatory: 0 | 1;
        /** @description Description */
        description?: string | null;
        /** @description Prefix if the column is a number field */
        numberPrefix?: string | null;
        /** @description Suffix if the column is a number field */
        numberSuffix?: string | null;
        /** @description Default number, if column is a number */
        numberDefault?: number | null;
        /** @description Min value, if column is a number */
        numberMin?: number | null;
        /** @description Max number, if column is a number */
        numberMax?: number | null;
        /** @description Number of decimals, if column is a number */
        numberDecimals?: number | null;
        /** @description Default text, if column is a text */
        textDefault?: string | null;
        /** @description Allowed pattern (regex) for text columns (not yet implemented) */
        textAllowedPattern?: string | null;
        /** @description Max length, if column is a text */
        textMaxLength?: number | null;
        /** @description Options for a selection (json array{id: int, label: string}) */
        selectionOptions?: string | null;
        /** @description Default option IDs for a selection (json int[]) */
        selectionDefault?: string | null;
        /** @description Default value, if column is datetime */
        datetimeDefault?: string | null;
        /** @description View IDs where this column should be added to be presented */
        "selectedViewIds[]"?: number[] | null;
      };
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Column created */
      200: {
        content: {
          "application/json": components["schemas"]["Column"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get all columns for a view Return an empty array if no columns were found */
  "api1-list-view-columns": {
    parameters: {
      path: {
        /** @description View ID */
        viewId: number;
      };
    };
    responses: {
      /** @description View deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Column"][];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create a column */
  "api1-create-column": {
    parameters: {
      query: {
        /** @description Table ID */
        tableId?: number | null;
        /** @description View ID */
        viewId?: number | null;
        /** @description Title */
        title: string;
        /** @description Column main type */
        type: "text" | "number" | "datetime" | "select";
        /** @description Column sub type */
        subtype?: string | null;
        /** @description Is the column mandatory */
        mandatory: 0 | 1;
        /** @description Description */
        description?: string | null;
        /** @description Prefix if the column is a number field */
        numberPrefix?: string | null;
        /** @description Suffix if the column is a number field */
        numberSuffix?: string | null;
        /** @description Default number, if column is a number */
        numberDefault?: number | null;
        /** @description Min value, if column is a number */
        numberMin?: number | null;
        /** @description Max number, if column is a number */
        numberMax?: number | null;
        /** @description Number of decimals, if column is a number */
        numberDecimals?: number | null;
        /** @description Default text, if column is a text */
        textDefault?: string | null;
        /** @description Allowed pattern (regex) for text columns (not yet implemented) */
        textAllowedPattern?: string | null;
        /** @description Max length, if column is a text */
        textMaxLength?: number | null;
        /** @description Options for a selection (json array{id: int, label: string}) */
        selectionOptions?: string | null;
        /** @description Default option IDs for a selection (json int[]) */
        selectionDefault?: string | null;
        /** @description Default value, if column is datetime */
        datetimeDefault?: string | null;
        /** @description View IDs where this column should be added to be presented */
        "selectedViewIds[]"?: number[] | null;
      };
    };
    responses: {
      /** @description Column created */
      200: {
        content: {
          "application/json": components["schemas"]["Column"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Returns a column object */
  "api1-get-column": {
    parameters: {
      path: {
        /** @description Wanted Column ID */
        columnId: number;
      };
    };
    responses: {
      /** @description Column returned */
      200: {
        content: {
          "application/json": components["schemas"]["Column"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Update a column */
  "api1-update-column": {
    parameters: {
      query: {
        /** @description Title */
        title?: string | null;
        /** @description Column sub type */
        subtype?: string | null;
        /** @description Is the column mandatory */
        mandatory: 0 | 1;
        /** @description Description */
        description?: string | null;
        /** @description Prefix if the column is a number field */
        numberPrefix?: string | null;
        /** @description Suffix if the column is a number field */
        numberSuffix?: string | null;
        /** @description Default number, if column is a number */
        numberDefault?: number | null;
        /** @description Min value, if column is a number */
        numberMin?: number | null;
        /** @description Max number, if column is a number */
        numberMax?: number | null;
        /** @description Number of decimals, if column is a number */
        numberDecimals?: number | null;
        /** @description Default text, if column is a text */
        textDefault?: string | null;
        /** @description Allowed pattern (regex) for text columns (not yet implemented) */
        textAllowedPattern?: string | null;
        /** @description Max length, if column is a text */
        textMaxLength?: number | null;
        /** @description Options for a selection (json array{id: int, label: string}) */
        selectionOptions?: string | null;
        /** @description Default option IDs for a selection (json int[]) */
        selectionDefault?: string | null;
        /** @description Default value, if column is datetime */
        datetimeDefault?: string | null;
      };
      path: {
        /** @description Column ID that will be updated */
        columnId: number;
      };
    };
    responses: {
      /** @description Updated column */
      200: {
        content: {
          "application/json": components["schemas"]["Column"];
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Delete a column */
  "api1-delete-column": {
    parameters: {
      path: {
        /** @description Wanted Column ID */
        columnId: number;
      };
    };
    responses: {
      /** @description Deleted column returned */
      200: {
        content: {
          "application/json": components["schemas"]["Column"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** List all rows values for a table, first row are the column titles */
  "api1-list-table-rows-simple": {
    parameters: {
      query?: {
        /** @description Limit */
        limit?: number | null;
        /** @description Offset */
        offset?: number | null;
      };
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Row values returned */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** List all rows for a table */
  "api1-list-table-rows": {
    parameters: {
      query?: {
        /** @description Limit */
        limit?: number | null;
        /** @description Offset */
        offset?: number | null;
      };
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Rows returned */
      200: {
        content: {
          "application/json": components["schemas"]["Row"][];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create a row within a table */
  "api1-create-row-in-table": {
    parameters: {
      query: {
        /** @description Data as key - value store */
        data: OneOf<[string, {
          /** Format: int64 */
          columnId: number;
          value: Record<string, never>;
        }]>;
      };
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Row returned */
      200: {
        content: {
          "application/json": components["schemas"]["Row"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** List all rows for a view */
  "api1-list-view-rows": {
    parameters: {
      query?: {
        /** @description Limit */
        limit?: number | null;
        /** @description Offset */
        offset?: number | null;
      };
      path: {
        /** @description View ID */
        viewId: number;
      };
    };
    responses: {
      /** @description Rows returned */
      200: {
        content: {
          "application/json": components["schemas"]["Row"][];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create a row within a view */
  "api1-create-row-in-view": {
    parameters: {
      query: {
        /** @description Data as key - value store */
        data: OneOf<[string, {
          /** Format: int64 */
          columnId: number;
          value: Record<string, never>;
        }]>;
      };
      path: {
        /** @description View ID */
        viewId: number;
      };
    };
    responses: {
      /** @description Row returned */
      200: {
        content: {
          "application/json": components["schemas"]["Row"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get a row */
  "api1-get-row": {
    parameters: {
      path: {
        /** @description Row ID */
        rowId: number;
      };
    };
    responses: {
      /** @description Row returned */
      200: {
        content: {
          "application/json": components["schemas"]["Row"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Update a row */
  "api1-update-row": {
    parameters: {
      query: {
        /** @description View ID */
        viewId?: number | null;
        /** @description Data as key - value store */
        data: OneOf<[string, {
          /** Format: int64 */
          columnId: number;
          value: Record<string, never>;
        }]>;
      };
      path: {
        /** @description Row ID */
        rowId: number;
      };
    };
    responses: {
      /** @description Updated row returned */
      200: {
        content: {
          "application/json": components["schemas"]["Row"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Delete a row */
  "api1-delete-row": {
    parameters: {
      path: {
        /** @description Row ID */
        rowId: number;
      };
    };
    responses: {
      /** @description Deleted row returned */
      200: {
        content: {
          "application/json": components["schemas"]["Row"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Delete a row within a view */
  "api1-delete-row-by-view": {
    parameters: {
      path: {
        /** @description View ID */
        viewId: number;
        /** @description Row ID */
        rowId: number;
      };
    };
    responses: {
      /** @description Deleted row returned */
      200: {
        content: {
          "application/json": components["schemas"]["Row"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Import from file in to a table */
  "api1-import-in-table": {
    parameters: {
      query: {
        /** @description Path to file */
        path: string;
        /** @description Create missing columns */
        createMissingColumns?: 0 | 1;
      };
      path: {
        /** @description Table ID */
        tableId: number;
      };
    };
    responses: {
      /** @description Import status returned */
      200: {
        content: {
          "application/json": components["schemas"]["ImportState"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Import from file in to a table */
  "api1-import-in-view": {
    parameters: {
      query: {
        /** @description Path to file */
        path: string;
        /** @description Create missing columns */
        createMissingColumns?: 0 | 1;
      };
      path: {
        /** @description View ID */
        viewId: number;
      };
    };
    responses: {
      /** @description Import status returned */
      200: {
        content: {
          "application/json": components["schemas"]["ImportState"];
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /**
   * [api v2] Returns all main resources
   * @description Tables and views incl. shares
   */
  "api_general-list": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Index returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Index"];
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Returns all Tables */
  "api_tables-list": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Tables returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Table"][];
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Create a new table and return it */
  "api_tables-create": {
    parameters: {
      query: {
        /** @description Title of the table */
        title: string;
        /** @description Emoji for the table */
        emoji?: string | null;
        /** @description Description for the table */
        description?: string | null;
        /** @description Template to use if wanted */
        template?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Tables returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Table"];
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Get a table object */
  "api_tables-show": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description Table ID */
        id: number;
      };
    };
    responses: {
      /** @description Table returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Table"];
            };
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Update tables properties */
  "api_tables-update": {
    parameters: {
      query?: {
        /** @description New table title */
        title?: string | null;
        /** @description New table emoji */
        emoji?: string | null;
        /** @description the tables description */
        description?: string;
        /** @description whether the table is archived */
        archived?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description Table ID */
        id: number;
      };
    };
    responses: {
      /** @description Tables returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Table"];
            };
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Delete a table */
  "api_tables-destroy": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description Table ID */
        id: number;
      };
    };
    responses: {
      /** @description Deleted table returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Table"];
            };
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * [api v2] Transfer table
   * @description Transfer table from one user to another
   */
  "api_tables-transfer": {
    parameters: {
      query: {
        /** @description New user ID */
        newOwnerUserId: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description Table ID */
        id: number;
      };
    };
    responses: {
      /** @description Ownership changed */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Table"];
            };
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * [api v2] Get all columns for a table or a view
   * @description Return an empty array if no columns were found
   */
  "api_columns-list": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description Node type */
        nodeType: "table" | "view";
        /** @description Node ID */
        nodeId: number;
      };
    };
    responses: {
      /** @description View deleted */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Column"][];
            };
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Get a column object */
  "api_columns-show": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description Column ID */
        id: number;
      };
    };
    responses: {
      /** @description Column returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Column"];
            };
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * [api v2] Create new numbered column
   * @description Specify a subtype to use any special numbered column
   */
  "api_columns-create-number-column": {
    parameters: {
      query: {
        /** @description Context of the column creation */
        baseNodeId: number;
        /** @description Title */
        title: string;
        /** @description Default value for new rows */
        numberDefault?: number | null;
        /** @description Decimals */
        numberDecimals?: number | null;
        /** @description Prefix */
        numberPrefix?: string | null;
        /** @description Suffix */
        numberSuffix?: string | null;
        /** @description Min */
        numberMin?: number | null;
        /** @description Max */
        numberMax?: number | null;
        /** @description Subtype for the new column */
        subtype?: "progress" | "stars" | null;
        /** @description Description */
        description?: string | null;
        /** @description View IDs where this columns should be added */
        "selectedViewIds[]"?: number[] | null;
        /** @description Is mandatory */
        mandatory?: 0 | 1;
        /** @description Context type of the column creation */
        baseNodeType?: "table" | "view";
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Column created */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Column"];
            };
          };
        };
      };
      /** @description No permission */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
          "text/plain": string;
        };
      };
    };
  };
  /**
   * [api v2] Create new text column
   * @description Specify a subtype to use any special text column
   */
  "api_columns-create-text-column": {
    parameters: {
      query: {
        /** @description Context of the column creation */
        baseNodeId: number;
        /** @description Title */
        title: string;
        /** @description Default */
        textDefault?: string | null;
        /** @description Allowed regex pattern */
        textAllowedPattern?: string | null;
        /** @description Max raw text length */
        textMaxLength?: number | null;
        /** @description Subtype for the new column */
        subtype?: "progress" | "stars" | null;
        /** @description Description */
        description?: string | null;
        /** @description View IDs where this columns should be added */
        "selectedViewIds[]"?: number[] | null;
        /** @description Is mandatory */
        mandatory?: 0 | 1;
        /** @description Context type of the column creation */
        baseNodeType?: "table" | "view";
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Column created */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Column"];
            };
          };
        };
      };
      /** @description No permission */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
          "text/plain": string;
        };
      };
    };
  };
  /**
   * [api v2] Create new selection column
   * @description Specify a subtype to use any special selection column
   */
  "api_columns-create-selection-column": {
    parameters: {
      query: {
        /** @description Context of the column creation */
        baseNodeId: number;
        /** @description Title */
        title: string;
        /** @description Json array{id: int, label: string} with options that can be selected, eg [{"id": 1, "label": "first"},{"id": 2, "label": "second"}] */
        selectionOptions: string;
        /** @description Json int|int[] for default selected option(s), eg 5 or ["1", "8"] */
        selectionDefault?: string | null;
        /** @description Subtype for the new column */
        subtype?: "progress" | "stars" | null;
        /** @description Description */
        description?: string | null;
        /** @description View IDs where this columns should be added */
        "selectedViewIds[]"?: number[] | null;
        /** @description Is mandatory */
        mandatory?: 0 | 1;
        /** @description Context type of the column creation */
        baseNodeType?: "table" | "view";
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Column created */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Column"];
            };
          };
        };
      };
      /** @description No permission */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
          "text/plain": string;
        };
      };
    };
  };
  /**
   * [api v2] Create new datetime column
   * @description Specify a subtype to use any special datetime column
   */
  "api_columns-create-datetime-column": {
    parameters: {
      query: {
        /** @description Context of the column creation */
        baseNodeId: number;
        /** @description Title */
        title: string;
        /** @description For a subtype 'date' you can set 'today'. For a main type or subtype 'time' you can set to 'now'. */
        datetimeDefault?: "today" | "now" | null;
        /** @description Subtype for the new column */
        subtype?: "progress" | "stars" | null;
        /** @description Description */
        description?: string | null;
        /** @description View IDs where this columns should be added */
        "selectedViewIds[]"?: number[] | null;
        /** @description Is mandatory */
        mandatory?: 0 | 1;
        /** @description Context type of the column creation */
        baseNodeType?: "table" | "view";
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Column created */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Column"];
            };
          };
        };
      };
      /** @description No permission */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
          "text/plain": string;
        };
      };
    };
  };
  /** [api v2] Add a node (table or view) to user favorites */
  "api_favorite-create": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description any Application::NODE_TYPE_* constant */
        nodeType: number;
        /** @description identifier of the node */
        nodeId: number;
      };
    };
    responses: {
      /** @description Tables returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: Record<string, never>;
            };
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Remove a node (table or view) to from favorites */
  "api_favorite-destroy": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description any Application::NODE_TYPE_* constant */
        nodeType: number;
        /** @description identifier of the node */
        nodeId: number;
      };
    };
    responses: {
      /** @description Deleted table returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: Record<string, never>;
            };
          };
        };
      };
      /** @description No permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * [api v3] Get all contexts available to the requesting person
   * @description Return an empty array if no contexts were found
   */
  "context-list": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description reporting in available contexts */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"][];
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Create a new context and return it */
  "context-create": {
    parameters: {
      query: {
        /** @description Name of the context */
        name: string;
        /** @description Material design icon name of the context */
        iconName: string;
        /** @description Descriptive text of the context */
        description?: string;
        /** @description optional nodes to be connected to this context */
        nodes?: OneOf<[{
          /** Format: int64 */
          id: number;
          /** Format: int64 */
          type: number;
          /** Format: int64 */
          permissions: number;
        }, unknown[]]>;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description returning the full context information */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"];
            };
          };
        };
      };
      /** @description invalid parameters were supplied */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description lacking permissions on a resource */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Get information about the requests context */
  "context-show": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description ID of the context */
        contextId: number;
      };
    };
    responses: {
      /** @description returning the full context information */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"];
            };
          };
        };
      };
      /** @description context not found or not available anymore */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Update an existing context and return it */
  "context-update": {
    parameters: {
      query?: {
        /** @description provide this parameter to set a new name */
        name?: string | null;
        /** @description provide this parameter to set a new icon */
        iconName?: string | null;
        /** @description provide this parameter to set a new description */
        description?: string | null;
        /** @description provide this parameter to set a new list of nodes. */
        nodes?: string | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description ID of the context */
        contextId: number;
      };
    };
    responses: {
      /** @description returning the full context information */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"];
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Delete an existing context and return it */
  "context-destroy": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description ID of the context */
        contextId: number;
      };
    };
    responses: {
      /** @description returning the full context information */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"];
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Transfer the ownership of a context and return it */
  "context-transfer": {
    parameters: {
      query: {
        /** @description ID of the new owner */
        newOwnerId: string;
        /** @description any Application::OWNER_TYPE_* constant */
        newOwnerType?: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description ID of the context */
        contextId: number;
      };
    };
    responses: {
      /** @description Ownership transferred */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"];
            };
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Add a node to a Context */
  "context-add-node": {
    parameters: {
      query: {
        /** @description ID of the node */
        nodeId: number;
        /** @description any Application::NODE_TYPE_* constant */
        nodeType: number;
        /** @description bitmask of the permissions for context recipients */
        permissions: number;
        /** @description in which order the node should appear within the context */
        order?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description ID of the context */
        contextId: number;
      };
    };
    responses: {
      /** @description Node added successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"];
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Remove a node from a Context */
  "context-remove-node": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description ID of the context */
        contextId: number;
        /** @description ID of the node-in-context relation */
        nodeRelId: number;
      };
    };
    responses: {
      /** @description Node removed successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"];
            };
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** [api v2] Update the order on a page of a context */
  "context-update-content-order": {
    parameters: {
      query: {
        /** @description content items with it and order values */
        content: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        /** @description ID of the context */
        contextId: number;
        /** @description ID of the page */
        pageId: number;
      };
    };
    responses: {
      /** @description content updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Context"];
            };
          };
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
};
