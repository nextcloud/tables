/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    readonly "/index.php/apps/tables/api/1/tables": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Returns all Tables
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index"];
        readonly put?: never;
        /**
         * Create a new table and return it
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-create-table"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/tables/{tableId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a table object
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-get-table"];
        /**
         * Update tables properties
         * @description This endpoint allows CORS requests
         */
        readonly put: operations["api1-update-table"];
        readonly post?: never;
        /**
         * Delete a table
         * @description This endpoint allows CORS requests
         */
        readonly delete: operations["api1-delete-table"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/tables/{tableId}/scheme": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * returns table scheme
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-show-scheme"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/tables/{tableId}/views": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all views for a table
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index-views"];
        readonly put?: never;
        /**
         * Create a new view for a table
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-create-view"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/views/{viewId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a view object
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-get-view"];
        /**
         * Update a view via key-value sets
         * @description This endpoint allows CORS requests
         */
        readonly put: operations["api1-update-view"];
        readonly post?: never;
        /**
         * Delete a view
         * @description This endpoint allows CORS requests
         */
        readonly delete: operations["api1-delete-view"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/shares/{shareId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a share object
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-get-share"];
        /**
         * Update a share permission
         * @description This endpoint allows CORS requests
         */
        readonly put: operations["api1-update-share-permissions"];
        readonly post?: never;
        /**
         * Delete a share
         * @description This endpoint allows CORS requests
         */
        readonly delete: operations["api1-delete-share"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/views/{viewId}/shares": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all shares for a view Will be empty if view does not exist
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index-view-shares"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/tables/{tableId}/shares": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all shares for a table Will be empty if table does not exist
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index-table-shares"];
        readonly put?: never;
        /**
         * Create a share for a table
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-create-table-share"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/shares": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Create a new share
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-create-share"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/shares/{shareId}/display-mode": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Updates the display mode of a context share
         * @description This endpoint allows CORS requests
         */
        readonly put: operations["api1-update-share-display-mode"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/tables/{tableId}/columns": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all columns for a table or a underlying view Return an empty array if no columns were found
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index-table-columns"];
        readonly put?: never;
        /**
         * Create a new column for a table
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-create-table-column"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/views/{viewId}/columns": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all columns for a view Return an empty array if no columns were found
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index-view-columns"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/columns": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Create a column
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-create-column"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/columns/{columnId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Returns a column object
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-get-column"];
        /**
         * Update a column
         * @description This endpoint allows CORS requests
         */
        readonly put: operations["api1-update-column"];
        readonly post?: never;
        /**
         * Delete a column
         * @description This endpoint allows CORS requests
         */
        readonly delete: operations["api1-delete-column"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/tables/{tableId}/rows/simple": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List all rows values for a table, first row are the column titles
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index-table-rows-simple"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/tables/{tableId}/rows": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List all rows for a table
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index-table-rows"];
        readonly put?: never;
        /**
         * Create a row within a table
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-create-row-in-table"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/views/{viewId}/rows": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * List all rows for a view
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-index-view-rows"];
        readonly put?: never;
        /**
         * Create a row within a view
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-create-row-in-view"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/rows/{rowId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a row
         * @description This endpoint allows CORS requests
         */
        readonly get: operations["api1-get-row"];
        /**
         * Update a row
         * @description This endpoint allows CORS requests
         */
        readonly put: operations["api1-update-row"];
        readonly post?: never;
        /**
         * Delete a row
         * @description This endpoint allows CORS requests
         */
        readonly delete: operations["api1-delete-row"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/views/{viewId}/rows/{rowId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a row within a view
         * @description This endpoint allows CORS requests
         */
        readonly delete: operations["api1-delete-row-by-view"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/import/table/{tableId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Import from file in to a table
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-import-in-table"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/index.php/apps/tables/api/1/import/views/{viewId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Import from file in to a table
         * @description This endpoint allows CORS requests
         */
        readonly post: operations["api1-import-in-view"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/init": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * [api v2] Returns all main resources
         * @description Tables and views incl. shares
         */
        readonly get: operations["api_general-index"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/tables": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** [api v2] Returns all Tables */
        readonly get: operations["api_tables-index"];
        readonly put?: never;
        /** [api v2] Create a new table and return it */
        readonly post: operations["api_tables-create"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/tables/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** [api v2] Get a table object */
        readonly get: operations["api_tables-show"];
        /** [api v2] Update tables properties */
        readonly put: operations["api_tables-update"];
        readonly post?: never;
        /** [api v2] Delete a table */
        readonly delete: operations["api_tables-destroy"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/tables/scheme/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** [api v2] Get a table Scheme */
        readonly get: operations["api_tables-show-scheme"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/tables/scheme": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /** creates table from scheme */
        readonly post: operations["api_tables-create-from-scheme"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/tables/{id}/transfer": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * [api v2] Transfer table
         * @description Transfer table from one user to another
         */
        readonly put: operations["api_tables-transfer"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/columns/{nodeType}/{nodeId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * [api v2] Get all columns for a table or a view
         * @description Return an empty array if no columns were found
         */
        readonly get: operations["api_columns-index"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/columns/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** [api v2] Get a column object */
        readonly get: operations["api_columns-show"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/columns/number": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * [api v2] Create new numbered column
         * @description Specify a subtype to use any special numbered column
         */
        readonly post: operations["api_columns-create-number-column"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/columns/text": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * [api v2] Create new text column
         * @description Specify a subtype to use any special text column
         */
        readonly post: operations["api_columns-create-text-column"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/columns/selection": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * [api v2] Create new selection column
         * @description Specify a subtype to use any special selection column
         */
        readonly post: operations["api_columns-create-selection-column"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/columns/datetime": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * [api v2] Create new datetime column
         * @description Specify a subtype to use any special datetime column
         */
        readonly post: operations["api_columns-create-datetime-column"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/columns/usergroup": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /** [api v2] Create new usergroup column */
        readonly post: operations["api_columns-create-usergroup-column"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/favorites/{nodeType}/{nodeId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /** [api v2] Add a node (table or view) to user favorites */
        readonly post: operations["api_favorite-create"];
        /** [api v2] Remove a node (table or view) to from favorites */
        readonly delete: operations["api_favorite-destroy"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/contexts": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * [api v2] Get all contexts available to the requesting person
         * @description Return an empty array if no contexts were found
         */
        readonly get: operations["context-index"];
        readonly put?: never;
        /** [api v2] Create a new context and return it */
        readonly post: operations["context-create"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/contexts/{contextId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** [api v2] Get information about the requests context */
        readonly get: operations["context-show"];
        /** [api v2] Update an existing context and return it */
        readonly put: operations["context-update"];
        readonly post?: never;
        /** [api v2] Delete an existing context and return it */
        readonly delete: operations["context-destroy"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/transfer": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /** [api v2] Transfer the ownership of a context and return it */
        readonly put: operations["context-transfer"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/pages/{pageId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /** [api v2] Update the order on a page of a context */
        readonly put: operations["context-update-content-order"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ocs/v2.php/apps/tables/api/2/{nodeCollection}/{nodeId}/rows": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /** [api v2] Create a new row in a table or a view */
        readonly post: operations["rowocs-create-row"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        readonly Capabilities: {
            readonly tables: {
                readonly enabled: boolean;
                readonly version: string;
                readonly apiVersions: readonly string[];
                readonly features: readonly string[];
                readonly isCirclesEnabled: boolean;
                readonly column_types: readonly string[];
            };
        };
        readonly Column: {
            /** Format: int64 */
            readonly id: number;
            readonly title: string;
            /** Format: int64 */
            readonly tableId: number;
            readonly createdBy: string;
            readonly createdAt: string;
            readonly lastEditBy: string;
            readonly lastEditAt: string;
            readonly type: string;
            readonly subtype: string;
            readonly mandatory: boolean;
            readonly description: string;
            /** Format: int64 */
            readonly orderWeight: number;
            /** Format: double */
            readonly numberDefault: number;
            /** Format: double */
            readonly numberMin: number;
            /** Format: double */
            readonly numberMax: number;
            /** Format: int64 */
            readonly numberDecimals: number;
            readonly numberPrefix: string;
            readonly numberSuffix: string;
            readonly textDefault: string;
            readonly textAllowedPattern: string;
            /** Format: int64 */
            readonly textMaxLength: number;
            readonly selectionOptions: string;
            readonly selectionDefault: string;
            readonly datetimeDefault: string;
            readonly usergroupDefault: string;
            readonly usergroupMultipleItems: boolean;
            readonly usergroupSelectUsers: boolean;
            readonly usergroupSelectGroups: boolean;
            readonly usergroupSelectTeams: boolean;
            readonly showUserStatus: boolean;
        };
        readonly Context: {
            /** Format: int64 */
            readonly id: number;
            readonly name: string;
            readonly iconName: string;
            readonly description: string;
            readonly owner: string;
            /** Format: int64 */
            readonly ownerType: number;
        };
        readonly ContextNavigation: {
            /** Format: int64 */
            readonly id: number;
            /** Format: int64 */
            readonly shareId: number;
            /** Format: int64 */
            readonly displayMode: number;
            readonly userId: string;
        };
        readonly ImportState: {
            /** Format: int64 */
            readonly found_columns_count: number;
            /** Format: int64 */
            readonly matching_columns_count: number;
            /** Format: int64 */
            readonly created_columns_count: number;
            /** Format: int64 */
            readonly inserted_rows_count: number;
            /** Format: int64 */
            readonly errors_parsing_count: number;
            /** Format: int64 */
            readonly errors_count: number;
        };
        readonly Index: {
            readonly tables: readonly components["schemas"]["Table"][];
            readonly views: readonly components["schemas"]["View"][];
        };
        readonly OCSMeta: {
            readonly status: string;
            readonly statuscode: number;
            readonly message?: string;
            readonly totalitems?: string;
            readonly itemsperpage?: string;
        };
        readonly Row: {
            /** Format: int64 */
            readonly id: number;
            /** Format: int64 */
            readonly tableId: number;
            readonly createdBy: string;
            readonly createdAt: string;
            readonly lastEditBy: string;
            readonly lastEditAt: string;
            readonly data: {
                /** Format: int64 */
                readonly columnId: number;
                readonly value: Record<string, never>;
            } | null;
        };
        readonly Share: {
            /** Format: int64 */
            readonly id: number;
            readonly sender: string;
            readonly receiver: string;
            readonly receiverDisplayName: string;
            readonly receiverType: string;
            /** Format: int64 */
            readonly nodeId: number;
            readonly nodeType: string;
            readonly permissionRead: boolean;
            readonly permissionCreate: boolean;
            readonly permissionUpdate: boolean;
            readonly permissionDelete: boolean;
            readonly permissionManage: boolean;
            readonly createdAt: string;
            readonly createdBy: string;
        };
        readonly Table: {
            /** Format: int64 */
            readonly id: number;
            readonly title: string;
            readonly emoji: string | null;
            readonly ownership: string;
            readonly ownerDisplayName: string;
            readonly createdBy: string;
            readonly createdAt: string;
            readonly lastEditBy: string;
            readonly lastEditAt: string;
            readonly archived: boolean;
            readonly favorite: boolean;
            readonly isShared: boolean;
            readonly onSharePermissions: {
                readonly read: boolean;
                readonly create: boolean;
                readonly update: boolean;
                readonly delete: boolean;
                readonly manage: boolean;
            } | null;
            readonly hasShares: boolean;
            /** Format: int64 */
            readonly rowsCount: number;
            readonly views: readonly components["schemas"]["View"][];
            /** Format: int64 */
            readonly columnsCount: number;
        };
        readonly View: {
            /** Format: int64 */
            readonly id: number;
            readonly title: string;
            readonly emoji: string | null;
            /** Format: int64 */
            readonly tableId: number;
            readonly ownership: string;
            readonly ownerDisplayName: string | null;
            readonly createdBy: string;
            readonly createdAt: string;
            readonly lastEditBy: string;
            readonly lastEditAt: string;
            readonly description: string | null;
            readonly columns: readonly number[];
            readonly columnSettings: readonly {
                /** Format: int64 */
                readonly columnId: number;
                /** Format: int64 */
                readonly order: number;
            }[];
            readonly sort: readonly {
                /** Format: int64 */
                readonly columnId: number;
                /** @enum {string} */
                readonly mode: "ASC" | "DESC";
            }[];
            readonly filter: readonly (readonly {
                /** Format: int64 */
                readonly columnId: number;
                /** @enum {string} */
                readonly operator: "begins-with" | "ends-with" | "contains" | "is-equal" | "is-greater-than" | "is-greater-than-or-equal" | "is-lower-than" | "is-lower-than-or-equal" | "is-empty";
                readonly value: string | number;
            }[])[];
            readonly isShared: boolean;
            readonly favorite: boolean;
            readonly onSharePermissions: {
                readonly read: boolean;
                readonly create: boolean;
                readonly update: boolean;
                readonly delete: boolean;
                readonly manage: boolean;
            } | null;
            readonly hasShares: boolean;
            /** Format: int64 */
            readonly rowsCount: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    readonly "api1-index": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Tables returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Table"][];
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-create-table": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Title of the table */
                    readonly title: string;
                    /** @description Emoji for the table */
                    readonly emoji?: string | null;
                    /**
                     * @description Template to use if wanted
                     * @default custom
                     */
                    readonly template?: string;
                };
            };
        };
        readonly responses: {
            /** @description Tables returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Table"];
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-get-table": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Table returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Table"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-update-table": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description New table title
                     * @default null
                     */
                    readonly title?: string | null;
                    /**
                     * @description New table emoji
                     * @default null
                     */
                    readonly emoji?: string | null;
                    /**
                     * @description Whether the table is archived
                     * @default false
                     */
                    readonly archived?: boolean;
                };
            };
        };
        readonly responses: {
            /** @description Tables returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Table"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-delete-table": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted table returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Table"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-show-scheme": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Table returned */
            readonly 200: {
                headers: {
                    readonly "Content-Disposition"?: string;
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Table"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-index-views": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Views returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["View"][];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-create-view": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID that will hold the view */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Title for the view */
                    readonly title: string;
                    /** @description Emoji for the view */
                    readonly emoji?: string | null;
                };
            };
        };
        readonly responses: {
            /** @description View created */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["View"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-get-view": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description View returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["View"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-update-view": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description key-value pairs */
                    readonly data: {
                        /** @enum {string} */
                        readonly key: "title" | "emoji" | "description";
                        readonly value: string;
                    } | {
                        /** @enum {string} */
                        readonly key: "columns";
                        readonly value: readonly number[];
                    } | {
                        /** @enum {string} */
                        readonly key: "sort";
                        readonly value: {
                            /** Format: int64 */
                            readonly columnId: number;
                            /** @enum {string} */
                            readonly mode: "ASC" | "DESC";
                        };
                    } | {
                        /** @enum {string} */
                        readonly key: "filter";
                        readonly value: {
                            /** Format: int64 */
                            readonly columnId: number;
                            /** @enum {string} */
                            readonly operator: "begins-with" | "ends-with" | "contains" | "is-equal" | "is-greater-than" | "is-greater-than-or-equal" | "is-lower-than" | "is-lower-than-or-equal" | "is-empty";
                            readonly value: string | number;
                        };
                    };
                };
            };
        };
        readonly responses: {
            /** @description View updated */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["View"];
                };
            };
            /** @description Invalid data */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-delete-view": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description View deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["View"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-get-share": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Share ID */
                readonly shareId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Share returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Share"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-update-share-permissions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Share ID */
                readonly shareId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Permission type that should be changed */
                    readonly permissionType: string;
                    /** @description New permission value */
                    readonly permissionValue: boolean;
                };
            };
        };
        readonly responses: {
            /** @description View deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Share"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-delete-share": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Share ID */
                readonly shareId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description View deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Share"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-index-view-shares": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Shares returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Share"][];
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-index-table-shares": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Shares returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Share"][];
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-create-table-share": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Receiver ID */
                    readonly receiver: string;
                    /**
                     * @description Receiver type
                     * @enum {string}
                     */
                    readonly receiverType: "user" | "group";
                    /** @description Permission if receiver can read data */
                    readonly permissionRead: boolean;
                    /** @description Permission if receiver can create data */
                    readonly permissionCreate: boolean;
                    /** @description Permission if receiver can update data */
                    readonly permissionUpdate: boolean;
                    /** @description Permission if receiver can delete data */
                    readonly permissionDelete: boolean;
                    /** @description Permission if receiver can manage table */
                    readonly permissionManage: boolean;
                };
            };
        };
        readonly responses: {
            /** @description View deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Share"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-create-share": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description Node ID
                     */
                    readonly nodeId: number;
                    /**
                     * @description Node type
                     * @enum {string}
                     */
                    readonly nodeType: "table" | "view" | "context";
                    /** @description Receiver ID */
                    readonly receiver: string;
                    /**
                     * @description Receiver type
                     * @enum {string}
                     */
                    readonly receiverType: "user" | "group";
                    /**
                     * @description Permission if receiver can read data
                     * @default false
                     */
                    readonly permissionRead?: boolean;
                    /**
                     * @description Permission if receiver can create data
                     * @default false
                     */
                    readonly permissionCreate?: boolean;
                    /**
                     * @description Permission if receiver can update data
                     * @default false
                     */
                    readonly permissionUpdate?: boolean;
                    /**
                     * @description Permission if receiver can delete data
                     * @default false
                     */
                    readonly permissionDelete?: boolean;
                    /**
                     * @description Permission if receiver can manage node
                     * @default false
                     */
                    readonly permissionManage?: boolean;
                    /**
                     * Format: int64
                     * @description context shares only, whether it should appear in nav bar. 0: no, 1: recipients, 2: all (default). Cf. Application::NAV_ENTRY_MODE_*.
                     * @default 2
                     */
                    readonly displayMode?: number;
                };
            };
        };
        readonly responses: {
            /** @description Share returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Share"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-update-share-display-mode": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Share ID */
                readonly shareId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description The new value for the display mode of the nav bar icon. 0: hidden, 1: visible for recipients, 2: visible for all
                     */
                    readonly displayMode: number;
                    /**
                     * @description "default" to set the default, "self" to set an override for the authenticated user
                     * @default default
                     * @enum {string}
                     */
                    readonly target?: "default" | "self";
                };
            };
        };
        readonly responses: {
            /** @description Display mode updated */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ContextNavigation"];
                };
            };
            /** @description Invalid parameter */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Share not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-index-table-columns": {
        readonly parameters: {
            readonly query?: {
                /** @description View ID */
                readonly viewId?: number | null;
            };
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description View deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Column"][];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-create-table-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Title */
                    readonly title: string;
                    /**
                     * @description Column main type
                     * @enum {string}
                     */
                    readonly type: "text" | "number" | "datetime" | "select" | "usergroup";
                    /** @description Column sub type */
                    readonly subtype?: string | null;
                    /** @description Is the column mandatory */
                    readonly mandatory: boolean;
                    /** @description Description */
                    readonly description?: string | null;
                    /** @description Prefix if the column is a number field */
                    readonly numberPrefix?: string | null;
                    /** @description Suffix if the column is a number field */
                    readonly numberSuffix?: string | null;
                    /**
                     * Format: double
                     * @description Default number, if column is a number
                     */
                    readonly numberDefault?: number | null;
                    /**
                     * Format: double
                     * @description Min value, if column is a number
                     */
                    readonly numberMin?: number | null;
                    /**
                     * Format: double
                     * @description Max number, if column is a number
                     */
                    readonly numberMax?: number | null;
                    /**
                     * Format: int64
                     * @description Number of decimals, if column is a number
                     */
                    readonly numberDecimals?: number | null;
                    /** @description Default text, if column is a text */
                    readonly textDefault?: string | null;
                    /** @description Allowed pattern (regex) for text columns (not yet implemented) */
                    readonly textAllowedPattern?: string | null;
                    /**
                     * Format: int64
                     * @description Max length, if column is a text
                     */
                    readonly textMaxLength?: number | null;
                    /**
                     * @description Options for a selection (json array{id: int, label: string})
                     * @default
                     */
                    readonly selectionOptions?: string | null;
                    /**
                     * @description Default option IDs for a selection (json list<int>)
                     * @default
                     */
                    readonly selectionDefault?: string | null;
                    /**
                     * @description Default value, if column is datetime
                     * @default
                     */
                    readonly datetimeDefault?: string | null;
                    /**
                     * @description Default value, if column is usergroup
                     * @default
                     */
                    readonly usergroupDefault?: string | null;
                    /**
                     * @description Can select multiple users or/and groups, if column is usergroup
                     * @default null
                     */
                    readonly usergroupMultipleItems?: boolean | null;
                    /**
                     * @description Can select users, if column type is usergroup
                     * @default null
                     */
                    readonly usergroupSelectUsers?: boolean | null;
                    /**
                     * @description Can select groups, if column type is usergroup
                     * @default null
                     */
                    readonly usergroupSelectGroups?: boolean | null;
                    /**
                     * @description Can select teams, if column type is usergroup
                     * @default null
                     */
                    readonly usergroupSelectTeams?: boolean | null;
                    /**
                     * @description Whether to show the user's status, if column type is usergroup
                     * @default null
                     */
                    readonly usergroupShowUserStatus?: boolean | null;
                    /**
                     * @description View IDs where this column should be added to be presented
                     * @default []
                     */
                    readonly selectedViewIds?: readonly number[] | null;
                };
            };
        };
        readonly responses: {
            /** @description Column created */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Column"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-index-view-columns": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description View deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Column"][];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-create-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description Table ID
                     */
                    readonly tableId?: number | null;
                    /**
                     * Format: int64
                     * @description View ID
                     */
                    readonly viewId?: number | null;
                    /** @description Title */
                    readonly title: string;
                    /**
                     * @description Column main type
                     * @enum {string}
                     */
                    readonly type: "text" | "number" | "datetime" | "select" | "usergroup";
                    /** @description Column sub type */
                    readonly subtype?: string | null;
                    /** @description Is the column mandatory */
                    readonly mandatory: boolean;
                    /** @description Description */
                    readonly description?: string | null;
                    /** @description Prefix if the column is a number field */
                    readonly numberPrefix?: string | null;
                    /** @description Suffix if the column is a number field */
                    readonly numberSuffix?: string | null;
                    /**
                     * Format: double
                     * @description Default number, if column is a number
                     */
                    readonly numberDefault?: number | null;
                    /**
                     * Format: double
                     * @description Min value, if column is a number
                     */
                    readonly numberMin?: number | null;
                    /**
                     * Format: double
                     * @description Max number, if column is a number
                     */
                    readonly numberMax?: number | null;
                    /**
                     * Format: int64
                     * @description Number of decimals, if column is a number
                     */
                    readonly numberDecimals?: number | null;
                    /** @description Default text, if column is a text */
                    readonly textDefault?: string | null;
                    /** @description Allowed pattern (regex) for text columns (not yet implemented) */
                    readonly textAllowedPattern?: string | null;
                    /**
                     * Format: int64
                     * @description Max length, if column is a text
                     */
                    readonly textMaxLength?: number | null;
                    /**
                     * @description Options for a selection (json array{id: int, label: string})
                     * @default
                     */
                    readonly selectionOptions?: string | null;
                    /**
                     * @description Default option IDs for a selection (json list<int>)
                     * @default
                     */
                    readonly selectionDefault?: string | null;
                    /**
                     * @description Default value, if column is datetime
                     * @default
                     */
                    readonly datetimeDefault?: string | null;
                    /**
                     * @description Default value, if column is usergroup (json array{id: string, type: int})
                     * @default
                     */
                    readonly usergroupDefault?: string | null;
                    /**
                     * @description Can select multiple users or/and groups, if column is usergroup
                     * @default null
                     */
                    readonly usergroupMultipleItems?: boolean | null;
                    /**
                     * @description Can select users, if column type is usergroup
                     * @default null
                     */
                    readonly usergroupSelectUsers?: boolean | null;
                    /**
                     * @description Can select groups, if column type is usergroup
                     * @default null
                     */
                    readonly usergroupSelectGroups?: boolean | null;
                    /**
                     * @description Can select teams, if column type is usergroup
                     * @default null
                     */
                    readonly usergroupSelectTeams?: boolean | null;
                    /**
                     * @description Whether to show the user's status, if column type is usergroup
                     * @default null
                     */
                    readonly usergroupShowUserStatus?: boolean | null;
                    /**
                     * @description View IDs where this column should be added to be presented
                     * @default []
                     */
                    readonly selectedViewIds?: readonly number[] | null;
                };
            };
        };
        readonly responses: {
            /** @description Column created */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Column"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-get-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Wanted Column ID */
                readonly columnId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Column returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Column"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-update-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Column ID that will be updated */
                readonly columnId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Title */
                    readonly title?: string | null;
                    /** @description Column sub type */
                    readonly subtype?: string | null;
                    /** @description Is the column mandatory */
                    readonly mandatory: boolean;
                    /** @description Description */
                    readonly description?: string | null;
                    /** @description Prefix if the column is a number field */
                    readonly numberPrefix?: string | null;
                    /** @description Suffix if the column is a number field */
                    readonly numberSuffix?: string | null;
                    /**
                     * Format: double
                     * @description Default number, if column is a number
                     */
                    readonly numberDefault?: number | null;
                    /**
                     * Format: double
                     * @description Min value, if column is a number
                     */
                    readonly numberMin?: number | null;
                    /**
                     * Format: double
                     * @description Max number, if column is a number
                     */
                    readonly numberMax?: number | null;
                    /**
                     * Format: int64
                     * @description Number of decimals, if column is a number
                     */
                    readonly numberDecimals?: number | null;
                    /** @description Default text, if column is a text */
                    readonly textDefault?: string | null;
                    /** @description Allowed pattern (regex) for text columns (not yet implemented) */
                    readonly textAllowedPattern?: string | null;
                    /**
                     * Format: int64
                     * @description Max length, if column is a text
                     */
                    readonly textMaxLength?: number | null;
                    /** @description Options for a selection (json array{id: int, label: string}) */
                    readonly selectionOptions?: string | null;
                    /** @description Default option IDs for a selection (json list<int>) */
                    readonly selectionDefault?: string | null;
                    /** @description Default value, if column is datetime */
                    readonly datetimeDefault?: string | null;
                    /** @description Default value, if column is usergroup */
                    readonly usergroupDefault?: string | null;
                    /** @description Can select multiple users or/and groups, if column is usergroup */
                    readonly usergroupMultipleItems?: boolean | null;
                    /** @description Can select users, if column type is usergroup */
                    readonly usergroupSelectUsers?: boolean | null;
                    /** @description Can select groups, if column type is usergroup */
                    readonly usergroupSelectGroups?: boolean | null;
                    /** @description Can select teams, if column type is usergroup */
                    readonly usergroupSelectTeams?: boolean | null;
                    /** @description Whether to show the user's status, if column type is usergroup */
                    readonly usergroupShowUserStatus?: boolean | null;
                };
            };
        };
        readonly responses: {
            /** @description Updated column */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Column"];
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-delete-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Wanted Column ID */
                readonly columnId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted column returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Column"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-index-table-rows-simple": {
        readonly parameters: {
            readonly query?: {
                /** @description Limit */
                readonly limit?: number | null;
                /** @description Offset */
                readonly offset?: number | null;
            };
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Row values returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly string[];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-index-table-rows": {
        readonly parameters: {
            readonly query?: {
                /** @description Limit */
                readonly limit?: number | null;
                /** @description Offset */
                readonly offset?: number | null;
            };
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Rows returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Row"][];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-create-row-in-table": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Data as key - value store */
                    readonly data: string | {
                        readonly [key: string]: Record<string, never>;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Row returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Row"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-index-view-rows": {
        readonly parameters: {
            readonly query?: {
                /** @description Limit */
                readonly limit?: number | null;
                /** @description Offset */
                readonly offset?: number | null;
            };
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Rows returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Row"][];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-create-row-in-view": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Data as key - value store */
                    readonly data: string | {
                        readonly [key: string]: Record<string, never>;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Row returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Row"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-get-row": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Row ID */
                readonly rowId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Row returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Row"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-update-row": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Row ID */
                readonly rowId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description View ID
                     */
                    readonly viewId?: number | null;
                    /** @description Data as key - value store */
                    readonly data: string | {
                        readonly [key: string]: Record<string, never>;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Updated row returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Row"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-delete-row": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Row ID */
                readonly rowId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted row returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Row"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-delete-row-by-view": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
                /** @description Row ID */
                readonly rowId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted row returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Row"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-import-in-table": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Table ID */
                readonly tableId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Path to file */
                    readonly path: string;
                    /**
                     * @description Create missing columns
                     * @default true
                     */
                    readonly createMissingColumns?: boolean;
                };
            };
        };
        readonly responses: {
            /** @description Import status returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ImportState"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api1-import-in-view": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description View ID */
                readonly viewId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Path to file */
                    readonly path: string;
                    /**
                     * @description Create missing columns
                     * @default true
                     */
                    readonly createMissingColumns?: boolean;
                };
            };
        };
        readonly responses: {
            /** @description Import status returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ImportState"];
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly message: string;
                    };
                };
            };
        };
    };
    readonly "api_general-index": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Index returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Index"];
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_tables-index": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Tables returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: readonly components["schemas"]["Table"][];
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_tables-create": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Title of the table */
                    readonly title: string;
                    /** @description Emoji for the table */
                    readonly emoji?: string | null;
                    /** @description Description for the table */
                    readonly description?: string | null;
                    /**
                     * @description Template to use if wanted
                     * @default custom
                     */
                    readonly template?: string;
                };
            };
        };
        readonly responses: {
            /** @description Tables returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Table"];
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_tables-show": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description Table ID */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Table returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Table"];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_tables-update": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description Table ID */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description New table title
                     * @default null
                     */
                    readonly title?: string | null;
                    /**
                     * @description New table emoji
                     * @default null
                     */
                    readonly emoji?: string | null;
                    /**
                     * @description the tables description
                     * @default null
                     */
                    readonly description?: string;
                    /**
                     * @description whether the table is archived
                     * @default null
                     */
                    readonly archived?: boolean;
                };
            };
        };
        readonly responses: {
            /** @description Tables returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Table"];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_tables-destroy": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description Table ID */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted table returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Table"];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_tables-show-scheme": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description Table ID */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Scheme returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Table"];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_tables-create-from-scheme": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description title of new table */
                    readonly title: string;
                    /** @description emoji */
                    readonly emoji: string;
                    /** @description description */
                    readonly description: string;
                    /** @description columns */
                    readonly columns: readonly components["schemas"]["Column"][];
                    /** @description views */
                    readonly views: readonly components["schemas"]["View"][];
                };
            };
        };
        readonly responses: {
            /** @description Tables returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Table"];
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_tables-transfer": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description Table ID */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description New user ID */
                    readonly newOwnerUserId: string;
                };
            };
        };
        readonly responses: {
            /** @description Ownership changed */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Table"];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_columns-index": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description Node type */
                readonly nodeType: "table" | "view";
                /** @description Node ID */
                readonly nodeId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description View deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: readonly components["schemas"]["Column"][];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_columns-show": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description Column ID */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Column returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Column"];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_columns-create-number-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description Context of the column creation
                     */
                    readonly baseNodeId: number;
                    /** @description Title */
                    readonly title: string;
                    /**
                     * Format: double
                     * @description Default value for new rows
                     */
                    readonly numberDefault?: number | null;
                    /**
                     * Format: int64
                     * @description Decimals
                     */
                    readonly numberDecimals?: number | null;
                    /** @description Prefix */
                    readonly numberPrefix?: string | null;
                    /** @description Suffix */
                    readonly numberSuffix?: string | null;
                    /**
                     * Format: double
                     * @description Min
                     */
                    readonly numberMin?: number | null;
                    /**
                     * Format: double
                     * @description Max
                     */
                    readonly numberMax?: number | null;
                    /**
                     * @description Subtype for the new column
                     * @default null
                     * @enum {string|null}
                     */
                    readonly subtype?: "progress" | "stars" | null;
                    /**
                     * @description Description
                     * @default null
                     */
                    readonly description?: string | null;
                    /**
                     * @description View IDs where this columns should be added
                     * @default []
                     */
                    readonly selectedViewIds?: readonly number[] | null;
                    /**
                     * @description Is mandatory
                     * @default false
                     */
                    readonly mandatory?: boolean;
                    /**
                     * @description Context type of the column creation
                     * @default table
                     * @enum {string}
                     */
                    readonly baseNodeType?: "table" | "view";
                };
            };
        };
        readonly responses: {
            /** @description Column created */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Column"];
                        };
                    };
                };
            };
            /** @description No permission */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                    readonly "text/plain": string;
                };
            };
        };
    };
    readonly "api_columns-create-text-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description Context of the column creation
                     */
                    readonly baseNodeId: number;
                    /** @description Title */
                    readonly title: string;
                    /** @description Default */
                    readonly textDefault?: string | null;
                    /** @description Allowed regex pattern */
                    readonly textAllowedPattern?: string | null;
                    /**
                     * Format: int64
                     * @description Max raw text length
                     */
                    readonly textMaxLength?: number | null;
                    /**
                     * @description Subtype for the new column
                     * @default null
                     * @enum {string|null}
                     */
                    readonly subtype?: "progress" | "stars" | null;
                    /**
                     * @description Description
                     * @default null
                     */
                    readonly description?: string | null;
                    /**
                     * @description View IDs where this columns should be added
                     * @default []
                     */
                    readonly selectedViewIds?: readonly number[] | null;
                    /**
                     * @description Is mandatory
                     * @default false
                     */
                    readonly mandatory?: boolean;
                    /**
                     * @description Context type of the column creation
                     * @default table
                     * @enum {string}
                     */
                    readonly baseNodeType?: "table" | "view";
                };
            };
        };
        readonly responses: {
            /** @description Column created */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Column"];
                        };
                    };
                };
            };
            /** @description No permission */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                    readonly "text/plain": string;
                };
            };
        };
    };
    readonly "api_columns-create-selection-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description Context of the column creation
                     */
                    readonly baseNodeId: number;
                    /** @description Title */
                    readonly title: string;
                    /** @description Json array{id: int, label: string} with options that can be selected, eg [{"id": 1, "label": "first"},{"id": 2, "label": "second"}] */
                    readonly selectionOptions: string;
                    /** @description Json int|list<int> for default selected option(s), eg 5 or ["1", "8"] */
                    readonly selectionDefault?: string | null;
                    /**
                     * @description Subtype for the new column
                     * @default null
                     * @enum {string|null}
                     */
                    readonly subtype?: "progress" | "stars" | null;
                    /**
                     * @description Description
                     * @default null
                     */
                    readonly description?: string | null;
                    /**
                     * @description View IDs where this columns should be added
                     * @default []
                     */
                    readonly selectedViewIds?: readonly number[] | null;
                    /**
                     * @description Is mandatory
                     * @default false
                     */
                    readonly mandatory?: boolean;
                    /**
                     * @description Context type of the column creation
                     * @default table
                     * @enum {string}
                     */
                    readonly baseNodeType?: "table" | "view";
                };
            };
        };
        readonly responses: {
            /** @description Column created */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Column"];
                        };
                    };
                };
            };
            /** @description No permission */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                    readonly "text/plain": string;
                };
            };
        };
    };
    readonly "api_columns-create-datetime-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description Context of the column creation
                     */
                    readonly baseNodeId: number;
                    /** @description Title */
                    readonly title: string;
                    /**
                     * @description For a subtype 'date' you can set 'today'. For a main type or subtype 'time' you can set to 'now'.
                     * @enum {string|null}
                     */
                    readonly datetimeDefault?: "today" | "now" | null;
                    /**
                     * @description Subtype for the new column
                     * @default null
                     * @enum {string|null}
                     */
                    readonly subtype?: "progress" | "stars" | null;
                    /**
                     * @description Description
                     * @default null
                     */
                    readonly description?: string | null;
                    /**
                     * @description View IDs where this columns should be added
                     * @default []
                     */
                    readonly selectedViewIds?: readonly number[] | null;
                    /**
                     * @description Is mandatory
                     * @default false
                     */
                    readonly mandatory?: boolean;
                    /**
                     * @description Context type of the column creation
                     * @default table
                     * @enum {string}
                     */
                    readonly baseNodeType?: "table" | "view";
                };
            };
        };
        readonly responses: {
            /** @description Column created */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Column"];
                        };
                    };
                };
            };
            /** @description No permission */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                    readonly "text/plain": string;
                };
            };
        };
    };
    readonly "api_columns-create-usergroup-column": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * Format: int64
                     * @description Context of the column creation
                     */
                    readonly baseNodeId: number;
                    /** @description Title */
                    readonly title: string;
                    /** @description Json array{id: string, type: int}, eg [{"id": "admin", "type": 0}, {"id": "user1", "type": 0}] */
                    readonly usergroupDefault?: string | null;
                    /**
                     * @description Whether you can select multiple users or/and groups
                     * @default null
                     */
                    readonly usergroupMultipleItems?: boolean;
                    /**
                     * @description Whether you can select users
                     * @default null
                     */
                    readonly usergroupSelectUsers?: boolean;
                    /**
                     * @description Whether you can select groups
                     * @default null
                     */
                    readonly usergroupSelectGroups?: boolean;
                    /**
                     * @description Whether you can select teams
                     * @default null
                     */
                    readonly usergroupSelectTeams?: boolean;
                    /**
                     * @description Whether to show the user's status
                     * @default null
                     */
                    readonly showUserStatus?: boolean;
                    /**
                     * @description Description
                     * @default null
                     */
                    readonly description?: string | null;
                    /**
                     * @description View IDs where this columns should be added
                     * @default []
                     */
                    readonly selectedViewIds?: readonly number[] | null;
                    /**
                     * @description Is mandatory
                     * @default false
                     */
                    readonly mandatory?: boolean;
                    /**
                     * @description Context type of the column creation
                     * @default table
                     * @enum {string}
                     */
                    readonly baseNodeType?: "table" | "view";
                };
            };
        };
        readonly responses: {
            /** @description Column created */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Column"];
                        };
                    };
                };
            };
            /** @description No permission */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                    readonly "text/plain": string;
                };
            };
        };
    };
    readonly "api_favorite-create": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description any Application::NODE_TYPE_* constant */
                readonly nodeType: number;
                /** @description identifier of the node */
                readonly nodeId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Tables returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: Record<string, never>;
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "api_favorite-destroy": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description any Application::NODE_TYPE_* constant */
                readonly nodeType: number;
                /** @description identifier of the node */
                readonly nodeId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted table returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: Record<string, never>;
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "context-index": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description reporting in available contexts */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: readonly components["schemas"]["Context"][];
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "context-create": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Name of the context */
                    readonly name: string;
                    /** @description Material design icon name of the context */
                    readonly iconName: string;
                    /**
                     * @description Descriptive text of the context
                     * @default
                     */
                    readonly description?: string;
                    /**
                     * @description optional nodes to be connected to this context
                     * @default []
                     */
                    readonly nodes?: readonly {
                        /** Format: int64 */
                        readonly id: number;
                        /** Format: int64 */
                        readonly type: number;
                        /** Format: int64 */
                        readonly permissions?: number;
                    }[];
                };
            };
        };
        readonly responses: {
            /** @description returning the full context information */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Context"];
                        };
                    };
                };
            };
            /** @description invalid parameters were supplied */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description lacking permissions on a resource */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "context-show": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description ID of the context */
                readonly contextId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description returning the full context information */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Context"];
                        };
                    };
                };
            };
            /** @description context not found or not available anymore */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "context-update": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description ID of the context */
                readonly contextId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @description provide this parameter to set a new name */
                    readonly name?: string | null;
                    /** @description provide this parameter to set a new icon */
                    readonly iconName?: string | null;
                    /** @description provide this parameter to set a new description */
                    readonly description?: string | null;
                    /** @description provide this parameter to set a new list of nodes. */
                    readonly nodes?: {
                        /** Format: int64 */
                        readonly id: number;
                        /** Format: int64 */
                        readonly type: number;
                        /** Format: int64 */
                        readonly permissions: number;
                        /** Format: int64 */
                        readonly order: number;
                    } | null;
                };
            };
        };
        readonly responses: {
            /** @description returning the full context information */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Context"];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "context-destroy": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description ID of the context */
                readonly contextId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description returning the full context information */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Context"];
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "context-transfer": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description ID of the context */
                readonly contextId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description ID of the new owner */
                    readonly newOwnerId: string;
                    /**
                     * Format: int64
                     * @description any Application::OWNER_TYPE_* constant
                     * @default 0
                     */
                    readonly newOwnerType?: number;
                };
            };
        };
        readonly responses: {
            /** @description Ownership transferred */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Context"];
                        };
                    };
                };
            };
            /** @description Invalid request */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "context-update-content-order": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description ID of the context */
                readonly contextId: number;
                /** @description ID of the page */
                readonly pageId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description content items with it and order values */
                    readonly content: {
                        /** Format: int64 */
                        readonly id: number;
                        /** Format: int64 */
                        readonly order: number;
                    };
                };
            };
        };
        readonly responses: {
            /** @description content updated successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Context"];
                        };
                    };
                };
            };
            /** @description Invalid request */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    readonly "rowocs-create-row": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description Required to be true for the API request to pass */
                readonly "OCS-APIRequest": boolean;
            };
            readonly path: {
                /** @description Indicates whether to create a row on a table or view */
                readonly nodeCollection: "tables" | "views";
                /** @description The identifier of the targeted table or view */
                readonly nodeId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description An array containing the column identifiers and their values */
                    readonly data: string | {
                        readonly [key: string]: Record<string, never>;
                    };
                };
            };
        };
        readonly responses: {
            /** @description Row returned */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: components["schemas"]["Row"];
                        };
                    };
                };
            };
            /** @description Invalid request parameters */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description No permissions */
            readonly 403: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
            /** @description Internal error */
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly ocs: {
                            readonly meta: components["schemas"]["OCSMeta"];
                            readonly data: {
                                readonly message: string;
                            };
                        };
                    };
                };
            };
        };
    };
}
